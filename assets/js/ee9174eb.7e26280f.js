"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[610],{6698:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return f}});var r=t(3117),i=t(102),a=(t(7294),t(3905)),o=["components"],u={},l=void 0,s={unversionedId:"tutorial-basics/Leetcode",id:"tutorial-basics/Leetcode",title:"Leetcode",description:"997. Find the Town Judge Esay",source:"@site/docs/tutorial-basics/Leetcode.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/Leetcode",permalink:"/doc/docs/tutorial-basics/Leetcode",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/tutorial-basics/Leetcode.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript",permalink:"/doc/docs/tutorial-basics/JavaScript"},next:{title:"Nuxt",permalink:"/doc/docs/tutorial-basics/Nuxt"}},c=[{value:"997. Find the Town Judge Esay",id:"997-find-the-town-judge-esay",children:[],level:3},{value:"1010. Pairs of Songs With Total Durations Divisible by 60 Medium",id:"1010-pairs-of-songs-with-total-durations-divisible-by-60-medium",children:[],level:3},{value:"1026. Maximum Difference Between Node and Ancestor Medium",id:"1026-maximum-difference-between-node-and-ancestor-medium",children:[],level:3}],d={toc:c};function f(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"997-find-the-town-judge-esay"},"997. Find the Town Judge Esay"),(0,a.kt)("p",null,"You are given an array trust where trust","[i]"," = ","[ai, bi]"," representing that the person labeled ai trusts the person labeled bi."),(0,a.kt)("p",null,"Return the label of the town judge if the town judge exists and can be identified, or return -1 otherwise."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: n = 3, trust = [[1,3],[2,3]]\nOutput: 3\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Solution")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number} n\n * @param {number[][]} trust\n * @return {number}\n */\nvar findJudge = function (n, trust) {\n  // \u83b7\u53d6 \u7f3a\u5c11\u7684\u90a3\u4e2a \u8282\u70b9\n  let arr = new Array(n).fill(0);\n  // \u83b7\u53d6 \u90fd\u4fe1\u4efb\u7684\u90a3\u4e2a \u8282\u70b9\n  let trusterArr = new Array(n).fill(0);\n\n  for (const [iterator, truster] of trust) {\n    arr[iterator - 1]++;\n    trusterArr[truster - 1]++;\n  }\n\n  for (let i = 0; i < n; i++) {\n    if (arr[i] === 0 && trusterArr[i] === n - 1) {\n      return i + 1;\n    }\n  }\n\n  return -1;\n};\n")),(0,a.kt)("h3",{id:"1010-pairs-of-songs-with-total-durations-divisible-by-60-medium"},"1010. Pairs of Songs With Total Durations Divisible by 60 Medium"),(0,a.kt)("p",null,"You are given a list of songs where the ith song has a duration of time","[i]"," seconds."),(0,a.kt)("p",null,"Return the number of pairs of songs for which their total duration in seconds is divisible by 60. Formally, we want the number of indices i, j such that i < j with (time","[i]"," + time","[j]",") % 60 == 0."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: time = [30,20,150,100,40]\nOutput: 3\nExplanation: Three pairs have a total duration divisible by 60:\n(time[0] = 30, time[2] = 150): total duration 180\n(time[1] = 20, time[3] = 100): total duration 120\n(time[1] = 20, time[4] = 40): total duration 60\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Solution")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * @param {number[]} time\n * @return {number}\n */\nvar numPairsDivisibleBy60 = function (time) {\n  let result = 0;\n  const arr = new Array(60).fill(0);\n\n  for (const iterator of time) {\n    arr[iterator % 60]++;\n  }\n\n  for (let i = 0; i <= 30; i++) {\n    if (i !== 0 && i !== 30) {\n      result += arr[i] * arr[60 - i];\n    } else {\n      result += (arr[i] * (arr[i] - 1)) / 2;\n    }\n  }\n\n  return result;\n};\n")),(0,a.kt)("h3",{id:"1026-maximum-difference-between-node-and-ancestor-medium"},"1026. Maximum Difference Between Node and Ancestor Medium"),(0,a.kt)("p",null,"Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b."),(0,a.kt)("p",null,"A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]\nOutput: 7\nExplanation: We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Solution")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"/**\n * Definition for a binary tree node.\n * function TreeNode(val, left, right) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.left = (left===undefined ? null : left)\n *     this.right = (right===undefined ? null : right)\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar maxAncestorDiff = function (root) {\n  if (root === null) return 0;\n  return fn(root, root.val, root.val);\n};\n\nconst fn = (node, curMax, curMin) => {\n  if (node === null) return curMax - curMin;\n\n  curMax = Math.max(curMax, node.val);\n  curMin = Math.min(curMin, node.val);\n\n  const left = fn(node.left, curMax, curMin);\n  const right = fn(node.right, curMax, curMin);\n\n  return Math.max(left, right);\n};\n")))}f.isMDXComponent=!0},3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return p}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),f=s(t),p=i,m=f["".concat(l,".").concat(p)]||f[p]||d[p]||a;return t?r.createElement(m,o(o({ref:n},c),{},{components:t})):r.createElement(m,o({ref:n},c))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=f;var u={};for(var l in n)hasOwnProperty.call(n,l)&&(u[l]=n[l]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);